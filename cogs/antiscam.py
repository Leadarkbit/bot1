import os
import json
import discord
import random
import asyncio
import re
from datetime import datetime
from discord.ext import commands
import sys
import importlib.util

# Importer le fichier de configuration
try:
    spec = importlib.util.spec_from_file_location("config", "config.py")
    config = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(config)
except Exception as e:
    print(f"Erreur lors du chargement de config.py: {e}")
    config = None

class AntiScam(commands.Cog):
    """Syst√®me anti-arnaque avec mode humiliation pour d√©tecter et troller les scammeurs"""
    
    def __init__(self, bot):
        self.bot = bot
        self.db_file = "data/antiscam_db.json"
        self.scammer_data = {}  # {user_id: {count: int, last_scam: datetime, warnings: int}}
        
        # R√©cup√©rer les IDs de canaux depuis config.py ou les variables d'environnement
        if config and hasattr(config, 'SECURITY_LOG_CHANNEL_ID'):
            self.alert_channel_id = config.SECURITY_LOG_CHANNEL_ID
            print("üì¢ Canal d'alerte charg√© depuis config.py")
        else:
            self.alert_channel_id = os.getenv('SECURITY_LOG_CHANNEL_ID')
            print("üì¢ Canal d'alerte charg√© depuis les variables d'environnement")
            
        # R√©cup√©rer l'ID du r√¥le scammer
        if config and hasattr(config, 'SCAMMER_ROLE_ID'):
            self.scammer_role_id = config.SCAMMER_ROLE_ID
            print("üé≠ R√¥le scammer charg√© depuis config.py")
        else:
            self.scammer_role_id = os.getenv('SCAMMER_ROLE_ID')
            print("üé≠ R√¥le scammer charg√© depuis les variables d'environnement")
        
        # Mots-cl√©s √† haut risque (un seul suffit pour d√©clencher la d√©tection)
        self.high_risk_keywords = [
            # Termes financiers √† haut risque
            "paypal", "boursorama", "revolut", "binance", "coinbase", "n26", "wise", 
            "lydia", "paysafecard", "western union", "moneygram", "cashapp",
            "euro", "euros", "‚Ç¨", "$", "argent", "sous", "fric", "thune", "pognon",
            "banque", "carte bancaire", "virement", "transfert", "paiement",
            
            # Termes de parrainage
            "parrainage", "parrain", "filleul", "code promo", "code parrainage",
            "utilise mon code", "utilise mon lien", "inscris-toi avec mon lien",
            
            # Termes d'arnaque classiques
            "argent facile", "argent rapide", "revenus passifs", "gagner de l'argent",
            "devenir riche", "millionnaire", "fortune", "sans effort", "sans risque",
            "doublez votre argent", "triplez votre mise", "rendement", "investissement s√ªr",
            
            # Urgence et raret√©
            "offre limit√©e", "derni√®re chance", "places limit√©es", "ne ratez pas",
            "opportunit√© unique", "aujourd'hui seulement", "avant fermeture"
        ]
        
        # Mots-cl√©s suspects pour la d√©tection
        self.suspicious_keywords = [
            # Termes li√©s √† l'argent
            "monnaie", "cash", "liquide", "gratuit", "bonus", "prime", "commission", 
            "b√©n√©fice", "profit", "gains", "revenus", "salaire", "r√©mun√©ration", "financement",
            
            # Termes li√©s aux cryptomonnaies
            "crypto", "bitcoin", "ethereum", "btc", "eth", "wallet", "portefeuille", 
            "blockchain", "nft", "token", "mining", "minage", "altcoin", "defi",
            "staking", "trading", "exchange", "ico", "shitcoin", "pump", "dump",
            
            # Termes d'arnaque classiques
            "m√©thode", "technique", "secret", "priv√©", "exclusif", "garantie", "valid√©",
            "astuce", "truc", "combine", "syst√®me", "strat√©gie", "formule", "programme",
            "formation", "coaching", "mentorat", "masterclass", "webinaire",
            
            # Termes sp√©cifiques aux arnaques
            "arnaque", "hack", "exploit", "faille", "bug", "glitch", "bypass",
            "contournement", "non d√©tect√©", "ind√©tectable", "escroquerie", "fraude"
        ]
        
        # Sch√©mas de messages suspects (expressions r√©guli√®res)
        self.suspicious_patterns = [
            r"gagne[rz]?\s+\d+[‚Ç¨$]\s+(?:par|en)\s+\d+\s+(?:jour|heure|minute|seconde)",  # Gagnez 500‚Ç¨ par jour
            r"\d+[‚Ç¨$]\s+(?:par|en)\s+\d+\s+(?:jour|heure|minute|seconde)",  # 500‚Ç¨ par jour
            r"(?:nouvelle|secret|priv√©)\s+(?:m√©thode|technique)",  # Nouvelle m√©thode, technique secr√®te
            r"(?:argent|euros|dollars)\s+(?:facile|rapide|garanti)",  # Argent facile, euros garantis
            r"(?:paypal|boursorama|revolut|binance|coinbase)\s+\d{4}",  # PayPal 2024
            r"(?:contact|mp|dm|message)\s+(?:moi|priv√©)",  # Contact moi, MP moi
            r"(?:lien|link)\s+(?:en|dans)\s+(?:bio|profil|dm|mp)",  # Lien en bio, link dans DM
            r"parrain(?:age)?\s+(?:code|lien)",  # Parrainage code, lien parrainage
            r"code\s+(?:promo|parrain(?:age)?)",  # Code promo, code parrainage
            r"(?:utilise|utiliser|utilisez)\s+(?:mon|ce)\s+(?:code|lien)",  # Utilisez mon code
            r"(?:inscri(?:s|vez|ption))\s+(?:avec|via|par|grace|gr√¢ce)\s+(?:mon|ce|le)\s+(?:lien|code)",  # Inscrivez-vous avec mon lien
            r"(?:euros?|‚Ç¨|\$|dollars?)\s+(?:offert|gratuit|cadeau|bonus)",  # 10‚Ç¨ offerts, euros gratuits
            r"(?:jusqu'√†|jusque?)\s+\d+[‚Ç¨$]",  # Jusqu'√† 100‚Ç¨
            r"(?:recevez|recevr(?:ai|ez)|gagne[rz]?)\s+(?:jusqu'√†|jusque?)?\s+\d+[‚Ç¨$]",  # Recevez jusqu'√† 50‚Ç¨
        ]
        
        # Phrases de remplacement pour humilier les scammeurs
        self.humiliation_messages = [
            "Je suis un arnaqueur, venez me signaler en priv√© üò≠",
            "Je passe mes journ√©es √† essayer d'arnaquer des gens parce que j'ai rat√© ma vie",
            "J'arnaque les gens parce que j'ai pas d'amis et j'ai besoin d'attention",
            "J'adore escroquer les gens et je suis fier de ne rien accomplir de ma vie",
            "Mes parents seraient tellement d√©√ßus s'ils savaient que je suis devenu un arnaqueur",
            "Je n'ai aucune comp√©tence r√©elle, donc j'essaie d'arnaquer les gens sur Discord",
            "Signaler mon compte SVP, je suis un scammer et je m√©rite d'√™tre banni",
            "Je suis tellement nul que je dois voler l'argent des autres pour me sentir important",
            "Regardez-moi, je suis un arnaqueur path√©tique qui essaie de vous voler votre argent",
            "Mon QI est si bas que je pense que personne ne remarquera que je suis un scammer",
            "ALERTE ARNAQUE : Ne me faites pas confiance, je suis l√† pour vous escroquer !",
            "Je suis un scammer et je viens d'√™tre attrap√© par le syst√®me anti-arnaque ü§°",
            "Oups, je viens de me faire griller en essayant de vous arnaquer üòÇ",
            "Mon message d'arnaque vient d'√™tre transform√© en aveu public üö®",
            "Je pensais √™tre intelligent, mais le bot vient de me ridiculiser devant tout le monde",
        ]
        
        # Cr√©er le dossier data s'il n'existe pas
        os.makedirs(os.path.dirname(self.db_file), exist_ok=True)
        
        # Charger la base de donn√©es
        self.load_db()
        
        print("üõ°Ô∏è Module Anti-Scam initialis√©!")
        print(f"üîç Mots-cl√©s √† haut risque charg√©s: {len(self.high_risk_keywords)}")
        print(f"üîç Mots-cl√©s suspects charg√©s: {len(self.suspicious_keywords)}")
        print(f"üîç Sch√©mas suspects charg√©s: {len(self.suspicious_patterns)}")
        print(f"üìä Scammeurs enregistr√©s: {len(self.scammer_data)}")
    
    def load_db(self):
        """Charger la base de donn√©es des scammeurs"""
        try:
            if os.path.exists(self.db_file):
                with open(self.db_file, 'r') as f:
                    data = json.load(f)
                    self.scammer_data = data
                print(f"‚úÖ Base de donn√©es anti-scam charg√©e: {len(self.scammer_data)} utilisateurs")
            else:
                self.save_db()
                print("‚úÖ Nouvelle base de donn√©es anti-scam cr√©√©e")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du chargement de la base de donn√©es: {str(e)}")
            self.scammer_data = {}
    
    def save_db(self):
        """Sauvegarder la base de donn√©es des scammeurs"""
        try:
            with open(self.db_file, 'w') as f:
                json.dump(self.scammer_data, f, indent=4)
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la sauvegarde de la base de donn√©es: {str(e)}")
            return False
    
    def is_suspicious_message(self, content):
        """V√©rifier si un message est suspect (contient des mots-cl√©s ou sch√©mas d'arnaque)"""
        # Ignorer les messages trop courts
        if len(content) < 3:
            return False
            
        # Convertir en minuscules pour une recherche insensible √† la casse
        content_lower = content.lower()
        
        # V√©rifier les symboles mon√©taires directement (pour √™tre s√ªr de les attraper)
        if "‚Ç¨" in content or "$" in content:
            print(f"üö® Symbole mon√©taire d√©tect√© dans: {content[:30]}...")
            return True
        
        # V√©rifier les mots exacts (pour √©viter les faux positifs avec des sous-cha√Ænes)
        words = re.findall(r'\b\w+\b', content_lower)
        for word in words:
            if word in ["euro", "euros", "paypal", "boursorama", "revolut", "sous", "argent", "fric"]:
                print(f"üö® Mot financier exact d√©tect√©: {word}")
                return True
        
        # V√©rifier les mots-cl√©s √† haut risque (un seul suffit)
        for keyword in self.high_risk_keywords:
            if keyword in content_lower:
                print(f"üö® Mot-cl√© √† haut risque d√©tect√©: {keyword}")
                return True
        
        # Compter les mots-cl√©s suspects dans le message
        found_keywords = [keyword for keyword in self.suspicious_keywords if keyword in content_lower]
        keyword_count = len(found_keywords)
        
        # V√©rifier les sch√©mas suspects
        pattern_matches = [pattern for pattern in self.suspicious_patterns if re.search(pattern, content_lower)]
        
        # Journaliser les d√©tections pour le d√©bogage
        if keyword_count > 0 or pattern_matches:
            print(f"üîç Analyse de message: {content_lower[:50]}...")
            if found_keywords:
                print(f"üìù Mots-cl√©s trouv√©s ({keyword_count}): {', '.join(found_keywords)}")
            if pattern_matches:
                print(f"üìù Sch√©mas suspects trouv√©s: {len(pattern_matches)}")
        
        # Un message est suspect s'il contient au moins 2 mots-cl√©s suspects ou correspond √† un sch√©ma
        return keyword_count >= 2 or len(pattern_matches) > 0
    
    def get_humiliation_message(self):
        """Obtenir un message d'humiliation al√©atoire"""
        return random.choice(self.humiliation_messages)
    
    def record_scam_attempt(self, user_id):
        """Enregistrer une tentative d'arnaque pour un utilisateur"""
        user_id_str = str(user_id)
        
        if user_id_str not in self.scammer_data:
            self.scammer_data[user_id_str] = {
                "count": 1,
                "first_scam": datetime.now().isoformat(),
                "last_scam": datetime.now().isoformat(),
                "warnings": 0
            }
        else:
            self.scammer_data[user_id_str]["count"] += 1
            self.scammer_data[user_id_str]["last_scam"] = datetime.now().isoformat()
        
        self.save_db()
        return self.scammer_data[user_id_str]["count"]
    
    def should_increase_warning(self, user_id):
        """D√©terminer si l'utilisateur doit recevoir un avertissement suppl√©mentaire"""
        user_id_str = str(user_id)
        
        if user_id_str not in self.scammer_data:
            return False
        
        # Augmenter l'avertissement tous les 3 messages d'arnaque
        if self.scammer_data[user_id_str]["count"] % 3 == 0:
            self.scammer_data[user_id_str]["warnings"] += 1
            self.save_db()
            return True
        
        return False
    
    def get_warning_level(self, user_id):
        """Obtenir le niveau d'avertissement d'un utilisateur"""
        user_id_str = str(user_id)
        
        if user_id_str not in self.scammer_data:
            return 0
        
        return self.scammer_data[user_id_str]["warnings"]
    
    @commands.Cog.listener()
    async def on_message(self, message):
        """Intercepter les messages pour d√©tecter les arnaques"""
        # Ignorer les messages des bots et les messages priv√©s
        if message.author.bot or not message.guild:
            return
        
        # Ignorer les messages des administrateurs
        if message.author.guild_permissions.administrator:
            return
        
        # Ignorer les messages trop courts
        if len(message.content) < 3:
            return
            
        # V√©rifier si le message est suspect
        is_suspicious = self.is_suspicious_message(message.content)
        
        # Journaliser pour le d√©bogage
        if len(message.content) > 5:  # Ignorer les messages trop courts
            print(f"üì® Message de {message.author.name}: {message.content[:30]}... | Suspect: {is_suspicious}")
        
        if is_suspicious:
            # Enregistrer la tentative d'arnaque
            attempt_count = self.record_scam_attempt(message.author.id)
            
            # Obtenir le contenu original pour les logs
            original_content = message.content
            
            try:
                # Supprimer le message original
                await message.delete()
                print(f"üóëÔ∏è Message suspect de {message.author.name} supprim√©: {original_content}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors de la suppression du message suspect: {str(e)}")
                # Si la suppression √©choue, on ne continue pas
                return
            
            try:
                # Cr√©er un webhook pour imiter l'utilisateur
                webhooks = await message.channel.webhooks()
                webhook = None
                
                # Chercher un webhook existant ou en cr√©er un nouveau
                for wh in webhooks:
                    if wh.name == "AntiScam System":
                        webhook = wh
                        break
                
                if webhook is None:
                    try:
                        webhook = await message.channel.create_webhook(name="AntiScam System")
                        print(f"üîß Webhook 'AntiScam System' cr√©√© dans le canal {message.channel.name}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Erreur lors de la cr√©ation du webhook: {str(e)}")
                        return
                
                # Obtenir un message d'humiliation
                humiliation = self.get_humiliation_message()
                
                # Envoyer le message modifi√© via le webhook
                await webhook.send(
                    content=humiliation,
                    username=message.author.display_name,
                    avatar_url=message.author.display_avatar.url,
                    allowed_mentions=discord.AllowedMentions.none()
                )
                
                print(f"üòà Message suspect de {message.author.name} remplac√©: {original_content} -> {humiliation}")
                
                # V√©rifier si l'utilisateur doit recevoir un avertissement suppl√©mentaire
                if self.should_increase_warning(message.author.id):
                    warning_level = self.get_warning_level(message.author.id)
                    await self.apply_sanctions(message.guild, message.author, warning_level)
                    print(f"‚ö†Ô∏è Niveau d'avertissement de {message.author.name} augment√© √† {warning_level}")
            
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors du remplacement du message suspect: {str(e)}")
            
            # Envoyer une alerte aux administrateurs
            await self.log_scam_attempt(message.author, message.channel, original_content, attempt_count)
    
    async def apply_sanctions(self, guild, member, warning_level):
        """Appliquer des sanctions en fonction du niveau d'avertissement"""
        try:
            # Niveau 1: Donner le r√¥le "Arnaqueur officiel"
            if warning_level == 1 and self.scammer_role_id:
                try:
                    scammer_role = guild.get_role(int(self.scammer_role_id))
                    if scammer_role:
                        await member.add_roles(scammer_role, reason="Tentatives d'arnaque r√©p√©t√©es")
                        print(f"üè∑Ô∏è R√¥le 'Arnaqueur officiel' attribu√© √† {member.name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors de l'attribution du r√¥le: {str(e)}")
            
            # Niveau 2: Timeout pendant 1 heure
            elif warning_level == 2:
                try:
                    # Timeout pendant 1 heure (3600 secondes)
                    await member.timeout(discord.utils.utcnow() + datetime.timedelta(seconds=3600), reason="Tentatives d'arnaque r√©p√©t√©es")
                    print(f"‚è≥ Timeout de 1 heure appliqu√© √† {member.name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors de l'application du timeout: {str(e)}")
            
            # Niveau 3: Bannissement
            elif warning_level >= 3:
                try:
                    await guild.ban(member, reason="Tentatives d'arnaque r√©p√©t√©es", delete_message_days=1)
                    print(f"üî® Utilisateur {member.name} banni pour tentatives d'arnaque r√©p√©t√©es")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors du bannissement: {str(e)}")
        
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'application des sanctions: {str(e)}")
    
    async def log_scam_attempt(self, author, channel, content, attempt_count):
        """Envoyer une alerte aux administrateurs"""
        try:
            # Trouver le canal d'alerte
            alert_channel = None
            if self.alert_channel_id:
                alert_channel = self.bot.get_channel(int(self.alert_channel_id))
            
            if alert_channel:
                embed = discord.Embed(
                    title="üö® Tentative d'Arnaque D√©tect√©e",
                    description=f"Une tentative d'arnaque a √©t√© d√©tect√©e et neutralis√©e.",
                    color=discord.Color.red(),
                    timestamp=datetime.now()
                )
                
                embed.add_field(
                    name="Utilisateur",
                    value=f"{author.mention} ({author.name}, ID: {author.id})",
                    inline=False
                )
                
                embed.add_field(
                    name="Canal",
                    value=f"{channel.mention}",
                    inline=True
                )
                
                embed.add_field(
                    name="Tentative n¬∞",
                    value=f"{attempt_count}",
                    inline=True
                )
                
                embed.add_field(
                    name="Niveau d'avertissement",
                    value=f"{self.get_warning_level(author.id)}",
                    inline=True
                )
                
                embed.add_field(
                    name="Message original",
                    value=f"```{content[:1000]}```" if content else "*Aucun contenu textuel*",
                    inline=False
                )
                
                await alert_channel.send(embed=embed)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'envoi de l'alerte: {str(e)}")
    
    @commands.command(name="scammer_stats")
    @commands.has_permissions(administrator=True)
    async def scammer_stats(self, ctx, member: discord.Member = None):
        """Afficher les statistiques d'un scammer ou la liste des scammeurs
        
        Usage: !scammer_stats [@utilisateur]
        """
        if member:
            # Afficher les stats d'un utilisateur sp√©cifique
            user_id = str(member.id)
            
            if user_id not in self.scammer_data:
                await ctx.send(f"‚úÖ {member.mention} n'a pas de tentatives d'arnaque enregistr√©es.")
                return
            
            data = self.scammer_data[user_id]
            
            embed = discord.Embed(
                title="üìä Statistiques de Scammer",
                description=f"Statistiques pour {member.mention}",
                color=discord.Color.red()
            )
            
            embed.add_field(
                name="Tentatives d'arnaque",
                value=f"{data['count']}",
                inline=True
            )
            
            embed.add_field(
                name="Niveau d'avertissement",
                value=f"{data['warnings']}",
                inline=True
            )
            
            embed.add_field(
                name="Premi√®re tentative",
                value=f"<t:{int(datetime.fromisoformat(data['first_scam']).timestamp())}:R>",
                inline=False
            )
            
            embed.add_field(
                name="Derni√®re tentative",
                value=f"<t:{int(datetime.fromisoformat(data['last_scam']).timestamp())}:R>",
                inline=False
            )
            
            await ctx.send(embed=embed)
        
        else:
            # Afficher la liste des scammeurs
            if not self.scammer_data:
                await ctx.send("‚úÖ Aucun scammer enregistr√© dans la base de donn√©es.")
                return
            
            embed = discord.Embed(
                title="üìä Liste des Scammers",
                description=f"Liste des utilisateurs ayant tent√© des arnaques",
                color=discord.Color.red()
            )
            
            # Trier par nombre de tentatives
            sorted_scammers = sorted(
                self.scammer_data.items(),
                key=lambda x: x[1]['count'],
                reverse=True
            )
            
            for user_id, data in sorted_scammers[:10]:  # Limiter √† 10 pour √©viter les messages trop longs
                try:
                    user = await self.bot.fetch_user(int(user_id))
                    user_name = f"{user.name} ({user.id})"
                except:
                    user_name = f"Utilisateur inconnu ({user_id})"
                
                embed.add_field(
                    name=user_name,
                    value=f"Tentatives: {data['count']} | Avertissements: {data['warnings']} | Derni√®re: <t:{int(datetime.fromisoformat(data['last_scam']).timestamp())}:R>",
                    inline=False
                )
            
            if len(sorted_scammers) > 10:
                embed.set_footer(text=f"Affichage des 10 premiers scammers sur {len(sorted_scammers)} au total.")
            
            await ctx.send(embed=embed)
    
    @commands.command(name="reset_scammer")
    @commands.has_permissions(administrator=True)
    async def reset_scammer(self, ctx, member: discord.Member):
        """R√©initialiser les statistiques d'un scammer
        
        Usage: !reset_scammer @utilisateur
        """
        user_id = str(member.id)
        
        if user_id not in self.scammer_data:
            await ctx.send(f"‚úÖ {member.mention} n'a pas de tentatives d'arnaque enregistr√©es.")
            return
        
        # Supprimer les donn√©es de l'utilisateur
        del self.scammer_data[user_id]
        self.save_db()
        
        # Retirer le r√¥le "Arnaqueur officiel" si pr√©sent
        if self.scammer_role_id:
            try:
                scammer_role = ctx.guild.get_role(int(self.scammer_role_id))
                if scammer_role and scammer_role in member.roles:
                    await member.remove_roles(scammer_role, reason="R√©initialisation du statut de scammer")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors du retrait du r√¥le: {str(e)}")
        
        await ctx.send(f"‚úÖ Les statistiques de scammer pour {member.mention} ont √©t√© r√©initialis√©es.")
    
    @commands.command(name="set_scammer_role")
    @commands.has_permissions(administrator=True)
    async def set_scammer_role(self, ctx, role: discord.Role = None):
        """D√©finir le r√¥le √† attribuer aux scammers
        
        Usage: !set_scammer_role @r√¥le
        """
        if role:
            # Mettre √† jour le r√¥le dans les variables d'environnement
            os.environ['SCAMMER_ROLE_ID'] = str(role.id)
            self.scammer_role_id = str(role.id)
            
            await ctx.send(f"‚úÖ Le r√¥le {role.mention} sera d√©sormais attribu√© aux scammers.")
        else:
            # Afficher le r√¥le actuel
            if self.scammer_role_id:
                role = ctx.guild.get_role(int(self.scammer_role_id))
                if role:
                    await ctx.send(f"‚ÑπÔ∏è Le r√¥le actuel pour les scammers est: {role.mention}")
                else:
                    await ctx.send("‚ö†Ô∏è Le r√¥le configur√© n'existe pas ou n'est pas accessible.")
            else:
                await ctx.send("‚ÑπÔ∏è Aucun r√¥le n'est configur√© pour les scammers.")
    
    @commands.command(name="antiscam_help")
    async def antiscam_help(self, ctx):
        """Afficher l'aide du syst√®me anti-arnaque
        
        Usage: !antiscam_help
        """
        embed = discord.Embed(
            title="üõ°Ô∏è Aide du Syst√®me Anti-Arnaque",
            description="Le syst√®me anti-arnaque d√©tecte et neutralise automatiquement les tentatives d'escroquerie.",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="Fonctionnement",
            value="‚Ä¢ D√©tection automatique des messages suspects\n"
                  "‚Ä¢ Remplacement par des aveux humiliants\n"
                  "‚Ä¢ Sanctions progressives contre les r√©cidivistes\n"
                  "‚Ä¢ Alertes aux administrateurs",
            inline=False
        )
        
        embed.add_field(
            name="Sanctions progressives",
            value="‚Ä¢ Niveau 1: Attribution du r√¥le 'Arnaqueur officiel'\n"
                  "‚Ä¢ Niveau 2: Timeout de 1 heure\n"
                  "‚Ä¢ Niveau 3: Bannissement d√©finitif",
            inline=False
        )
        
        embed.add_field(
            name="Commandes (Administrateurs)",
            value="‚Ä¢ `!scammer_stats [@utilisateur]` : Statistiques d'un scammer ou liste des scammers\n"
                  "‚Ä¢ `!reset_scammer @utilisateur` : R√©initialiser les statistiques d'un scammer\n"
                  "‚Ä¢ `!set_scammer_role @r√¥le` : D√©finir le r√¥le √† attribuer aux scammers\n"
                  "‚Ä¢ `!test_scam_detection \"message\"` : Tester la d√©tection d'arnaque sur un message",
            inline=False
        )
        
        await ctx.send(embed=embed)
    
    @commands.command(name="test_scam_detection")
    @commands.has_permissions(administrator=True)
    async def test_scam_detection(self, ctx, *, message: str):
        """Tester la d√©tection d'arnaque sur un message
        
        Usage: !test_scam_detection "Votre message de test ici"
        """
        # Supprimer la commande originale
        try:
            await ctx.message.delete()
        except:
            pass
        
        # V√©rifier si le message est suspect
        is_suspicious = self.is_suspicious_message(message)
        
        # Trouver les mots-cl√©s √† haut risque
        high_risk_found = [keyword for keyword in self.high_risk_keywords if keyword in message.lower()]
        
        # Trouver les mots-cl√©s suspects
        suspicious_found = [keyword for keyword in self.suspicious_keywords if keyword in message.lower()]
        
        # Trouver les sch√©mas suspects
        pattern_matches = [pattern for pattern in self.suspicious_patterns if re.search(pattern, message.lower())]
        
        # Cr√©er un embed pour afficher les r√©sultats
        embed = discord.Embed(
            title="üîç Test de D√©tection d'Arnaque",
            description=f"**Message test√©:**\n```{message}```",
            color=discord.Color.blue() if not is_suspicious else discord.Color.red()
        )
        
        embed.add_field(
            name="R√©sultat",
            value=f"**{'‚ö†Ô∏è SUSPECT' if is_suspicious else '‚úÖ NON SUSPECT'}**",
            inline=False
        )
        
        if high_risk_found:
            embed.add_field(
                name="üö® Mots-cl√©s √† haut risque d√©tect√©s",
                value=", ".join(high_risk_found),
                inline=False
            )
        
        if suspicious_found:
            embed.add_field(
                name="üîç Mots-cl√©s suspects d√©tect√©s",
                value=", ".join(suspicious_found[:15]) + (f" et {len(suspicious_found) - 15} autres..." if len(suspicious_found) > 15 else ""),
                inline=False
            )
            
            embed.add_field(
                name="üìä Nombre de mots-cl√©s suspects",
                value=f"{len(suspicious_found)} (seuil: 2)",
                inline=True
            )
        
        if pattern_matches:
            embed.add_field(
                name="üìù Sch√©mas suspects d√©tect√©s",
                value=f"{len(pattern_matches)} sch√©ma(s) suspect(s)",
                inline=True
            )
        
        await ctx.send(embed=embed)

async def setup(bot):
    await bot.add_cog(AntiScam(bot)) 