import discord
from discord.ext import commands
import os
import json
import secrets
import string
import asyncio
import ipaddress
from datetime import datetime, timedelta
import config  # Importer le fichier de configuration

class Security(commands.Cog):
    """Syst√®me de s√©curit√© avec authentification par cl√© secr√®te en cas de changement d'IP"""
    
    def __init__(self, bot):
        self.bot = bot
        self.db_file = "data/security_db.json"
        self.user_data = {}
        self.verification_in_progress = set()
        self.max_attempts = config.MAX_VERIFICATION_ATTEMPTS
        self.failed_attempts = {}
        self.special_role_id = config.SPECIAL_ROLE_ID  # ID du r√¥le sp√©cial √† g√©rer
        self.member_role_id = config.MEMBER_ROLE_ID  # ID du r√¥le Membre
        self.pending_verifications = {}  # {user_id: {guild_id, key}}
        
        # Cr√©er le dossier data s'il n'existe pas
        os.makedirs(os.path.dirname(self.db_file), exist_ok=True)
        
        # Charger la base de donn√©es
        self.load_db()
        
        print("üîí Module de s√©curit√© initialis√© avec succ√®s!")
        print(f"üîë R√¥le sp√©cial configur√©: {self.special_role_id}")
        print(f"üîë R√¥le membre configur√©: {self.member_role_id}")
    
    def load_db(self):
        """Charger la base de donn√©es des utilisateurs"""
        try:
            if os.path.exists(self.db_file):
                with open(self.db_file, 'r') as f:
                    self.user_data = json.load(f)
                print(f"‚úÖ Base de donn√©es de s√©curit√© charg√©e: {len(self.user_data)} utilisateurs")
            else:
                self.user_data = {}
                self.save_db()
                print("‚úÖ Nouvelle base de donn√©es de s√©curit√© cr√©√©e")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du chargement de la base de donn√©es: {str(e)}")
            self.user_data = {}
    
    def save_db(self):
        """Sauvegarder la base de donn√©es des utilisateurs"""
        try:
            with open(self.db_file, 'w') as f:
                json.dump(self.user_data, f, indent=4)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la sauvegarde de la base de donn√©es: {str(e)}")
    
    def generate_secret_key(self, length=8):
        """G√©n√©rer une cl√© secr√®te al√©atoire"""
        alphabet = string.ascii_letters + string.digits
        return ''.join(secrets.choice(alphabet) for _ in range(length))
    
    def get_user_ip(self, member):
        """Simuler l'obtention de l'IP d'un utilisateur (√† remplacer par votre m√©thode)"""
        # Note: Discord ne fournit pas l'IP des utilisateurs via l'API
        # Cette fonction est un placeholder - dans un environnement r√©el,
        # vous devriez utiliser une autre m√©thode pour obtenir l'IP
        
        # Pour les tests, on g√©n√®re une IP al√©atoire bas√©e sur l'ID de l'utilisateur
        # NE PAS UTILISER EN PRODUCTION
        user_id_int = int(member.id)
        ip_parts = [
            (user_id_int >> 24) & 0xFF,
            (user_id_int >> 16) & 0xFF,
            (user_id_int >> 8) & 0xFF,
            user_id_int & 0xFF
        ]
        return f"{ip_parts[0]}.{ip_parts[1]}.{ip_parts[2]}.{ip_parts[3]}"
    
    async def send_secret_key(self, member, key, is_new_member=False):
        """Envoyer la cl√© secr√®te √† l'utilisateur en message priv√©"""
        try:
            embed = discord.Embed(
                title="üîê Cl√© de S√©curit√©",
                description="Bienvenue sur le serveur! Pour votre s√©curit√©, nous avons g√©n√©r√© une cl√© unique.",
                color=discord.Color.blue()
            )
            
            embed.add_field(
                name="Votre Cl√© Secr√®te",
                value=f"`{key}`",
                inline=False
            )
            
            if is_new_member:
                embed.add_field(
                    name="‚ö†Ô∏è Action Requise",
                    value="Pour acc√©der au serveur, vous devez utiliser cette cl√©.\n"
                          "Tapez `!verify [votre cl√©]` dans n'importe quel canal du serveur.",
                    inline=False
                )
            else:
                embed.add_field(
                    name="Important",
                    value="Conservez cette cl√© en lieu s√ªr. Elle vous sera demand√©e si nous d√©tectons "
                          "un changement d'IP ou une connexion depuis un nouvel appareil.",
                    inline=False
                )
            
            await member.send(embed=embed)
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'envoi de la cl√© secr√®te √† {member.name}: {str(e)}")
            return False
    
    async def lock_user(self, member, guild):
        """Retirer les r√¥les d'un utilisateur et lui attribuer un r√¥le de v√©rification"""
        try:
            # Sauvegarder les r√¥les actuels
            user_id = str(member.id)
            if user_id in self.user_data:
                self.user_data[user_id]["previous_roles"] = [role.id for role in member.roles if role.id != guild.id]
            
            # V√©rifier si l'utilisateur a le r√¥le sp√©cial
            special_role = guild.get_role(self.special_role_id)
            has_special_role = special_role in member.roles
            
            # Sauvegarder cette information
            if user_id in self.user_data:
                self.user_data[user_id]["had_special_role"] = has_special_role
                self.save_db()
            
            # Cr√©er ou obtenir le r√¥le de v√©rification
            verification_role = discord.utils.get(guild.roles, name="En V√©rification")
            if not verification_role:
                try:
                    verification_role = await guild.create_role(
                        name="En V√©rification",
                        color=discord.Color.orange(),
                        reason="R√¥le pour les utilisateurs en attente de v√©rification"
                    )
                    
                    # Configurer les permissions pour ce r√¥le
                    for channel in guild.channels:
                        if isinstance(channel, discord.TextChannel):
                            # Autoriser uniquement le canal de v√©rification
                            if channel.name == "verification":
                                await channel.set_permissions(verification_role, read_messages=True, send_messages=True)
                            else:
                                await channel.set_permissions(verification_role, read_messages=False)
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors de la cr√©ation du r√¥le de v√©rification: {str(e)}")
                    return False
            
            # Retirer tous les r√¥les existants
            roles_to_remove = [role for role in member.roles if role.id != guild.id and role != verification_role]
            if roles_to_remove:
                await member.remove_roles(*roles_to_remove, reason="V√©rification de s√©curit√© - Changement d'IP d√©tect√©")
            
            # Ajouter le r√¥le de v√©rification
            await member.add_roles(verification_role, reason="V√©rification de s√©curit√© requise")
            
            # Journaliser l'action
            if has_special_role:
                print(f"üîí R√¥le sp√©cial {self.special_role_id} retir√© de {member.name} pendant la v√©rification")
            
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du verrouillage de l'utilisateur {member.name}: {str(e)}")
            return False
    
    async def unlock_user(self, member, guild):
        """Restaurer les r√¥les d'un utilisateur apr√®s v√©rification r√©ussie"""
        try:
            user_id = str(member.id)
            
            # Obtenir le r√¥le de v√©rification
            verification_role = discord.utils.get(guild.roles, name="En V√©rification")
            
            # Retirer le r√¥le de v√©rification
            if verification_role and verification_role in member.roles:
                await member.remove_roles(verification_role, reason="V√©rification de s√©curit√© r√©ussie")
            
            # Restaurer les r√¥les pr√©c√©dents
            if user_id in self.user_data and "previous_roles" in self.user_data[user_id]:
                roles_to_add = []
                for role_id in self.user_data[user_id]["previous_roles"]:
                    role = guild.get_role(role_id)
                    if role:
                        roles_to_add.append(role)
                
                if roles_to_add:
                    await member.add_roles(*roles_to_add, reason="V√©rification de s√©curit√© r√©ussie")
            
            # V√©rifier si l'utilisateur avait le r√¥le sp√©cial avant la v√©rification
            had_special_role = False
            if user_id in self.user_data and "had_special_role" in self.user_data[user_id]:
                had_special_role = self.user_data[user_id]["had_special_role"]
            
            # Si l'utilisateur avait le r√¥le sp√©cial, s'assurer qu'il est restaur√©
            if had_special_role:
                special_role = guild.get_role(self.special_role_id)
                if special_role and special_role not in member.roles:
                    await member.add_roles(special_role, reason="Restauration du r√¥le sp√©cial apr√®s v√©rification")
                    print(f"‚úÖ R√¥le sp√©cial {self.special_role_id} restaur√© pour {member.name} apr√®s v√©rification")
            
            # Mettre √† jour l'IP dans la base de donn√©es
            if user_id in self.user_data:
                self.user_data[user_id]["ip"] = self.get_user_ip(member)
                self.user_data[user_id]["last_verified"] = datetime.now().isoformat()
                self.save_db()
            
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du d√©verrouillage de l'utilisateur {member.name}: {str(e)}")
            return False
    
    async def start_verification(self, member, guild):
        """D√©marrer le processus de v√©rification pour un utilisateur"""
        user_id = str(member.id)
        
        # V√©rifier si une v√©rification est d√©j√† en cours
        if user_id in self.verification_in_progress:
            return
        
        self.verification_in_progress.add(user_id)
        
        try:
            # V√©rifier si l'utilisateur a le r√¥le sp√©cial avant de le verrouiller
            special_role = guild.get_role(self.special_role_id)
            has_special_role = special_role in member.roles
            
            # Verrouiller l'utilisateur
            await self.lock_user(member, guild)
            
            # Envoyer un message de v√©rification
            embed = discord.Embed(
                title="üîí V√©rification de S√©curit√© Requise",
                description="Nous avons d√©tect√© un changement d'IP pour votre compte.",
                color=discord.Color.orange()
            )
            
            embed.add_field(
                name="Instructions",
                value="Pour retrouver l'acc√®s au serveur, veuillez entrer la cl√© secr√®te "
                      "qui vous a √©t√© envoy√©e lors de votre arriv√©e sur le serveur.\n\n"
                      "R√©pondez √† ce message avec votre cl√© dans les 10 minutes.",
                inline=False
            )
            
            if has_special_role:
                embed.add_field(
                    name="Note",
                    value=f"Votre r√¥le sp√©cial a √©t√© temporairement retir√© et sera restaur√© apr√®s v√©rification.",
                    inline=False
                )
            
            verification_message = await member.send(embed=embed)
            
            # Attendre la r√©ponse de l'utilisateur
            def check(m):
                return m.author.id == member.id and m.channel.id == verification_message.channel.id
            
            try:
                response = await self.bot.wait_for('message', check=check, timeout=600)  # 10 minutes
                
                # V√©rifier la cl√©
                if user_id in self.user_data and response.content == self.user_data[user_id]["secret_key"]:
                    # Cl√© correcte
                    success_embed = discord.Embed(
                        title="‚úÖ V√©rification R√©ussie",
                        description="Votre identit√© a √©t√© v√©rifi√©e avec succ√®s. Vos acc√®s au serveur ont √©t√© restaur√©s.",
                        color=discord.Color.green()
                    )
                    
                    if has_special_role:
                        success_embed.add_field(
                            name="R√¥le Sp√©cial",
                            value="Votre r√¥le sp√©cial a √©t√© restaur√©.",
                            inline=False
                        )
                    
                    await member.send(embed=success_embed)
                    
                    # Restaurer les acc√®s
                    await self.unlock_user(member, guild)
                    
                    # R√©initialiser les tentatives √©chou√©es
                    if user_id in self.failed_attempts:
                        del self.failed_attempts[user_id]
                else:
                    # Cl√© incorrecte
                    failure_embed = discord.Embed(
                        title="‚ùå V√©rification √âchou√©e",
                        description="La cl√© que vous avez fournie est incorrecte.",
                        color=discord.Color.red()
                    )
                    
                    # G√©rer les tentatives √©chou√©es
                    if user_id not in self.failed_attempts:
                        self.failed_attempts[user_id] = 1
                    else:
                        self.failed_attempts[user_id] += 1
                    
                    attempts_left = self.max_attempts - self.failed_attempts[user_id]
                    
                    if attempts_left > 0:
                        failure_embed.add_field(
                            name="Tentatives restantes",
                            value=f"Il vous reste {attempts_left} tentative(s).\n"
                                  f"Vous pouvez r√©essayer en envoyant votre cl√©.",
                            inline=False
                        )
                        await member.send(embed=failure_embed)
                        
                        # Relancer la v√©rification
                        self.verification_in_progress.remove(user_id)
                        await self.start_verification(member, guild)
                        return
                    else:
                        # Trop de tentatives √©chou√©es
                        failure_embed.add_field(
                            name="Compte verrouill√©",
                            value="Vous avez d√©pass√© le nombre maximum de tentatives.\n"
                                  "Veuillez contacter un administrateur pour assistance.",
                            inline=False
                        )
                        await member.send(embed=failure_embed)
                        
                        # Alerter les administrateurs
                        await self.alert_admins(member, guild, "tentatives_max")
            except asyncio.TimeoutError:
                # L'utilisateur n'a pas r√©pondu √† temps
                timeout_embed = discord.Embed(
                    title="‚è∞ D√©lai Expir√©",
                    description="Vous n'avez pas fourni votre cl√© dans le d√©lai imparti.",
                    color=discord.Color.red()
                )
                
                timeout_embed.add_field(
                    name="Que faire maintenant?",
                    value="Veuillez contacter un administrateur pour assistance.",
                    inline=False
                )
                
                await member.send(embed=timeout_embed)
                
                # Alerter les administrateurs
                await self.alert_admins(member, guild, "timeout")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la v√©rification de {member.name}: {str(e)}")
        finally:
            # Retirer l'utilisateur de la liste des v√©rifications en cours
            if user_id in self.verification_in_progress:
                self.verification_in_progress.remove(user_id)
    
    async def alert_admins(self, member, guild, reason):
        """Alerter les administrateurs d'un probl√®me de s√©curit√©"""
        try:
            # Trouver le canal d'alerte
            alert_channel_id = config.SECURITY_LOG_CHANNEL_ID
            if alert_channel_id:
                alert_channel = self.bot.get_channel(int(alert_channel_id))
            else:
                # Chercher un canal de logs ou cr√©er un canal d'alerte
                alert_channel = discord.utils.get(guild.text_channels, name="security-alerts")
                if not alert_channel:
                    # Chercher la cat√©gorie admin ou logs
                    admin_category = discord.utils.get(guild.categories, name="Administration")
                    if not admin_category:
                        admin_category = discord.utils.get(guild.categories, name="Logs")
                    
                    # Cr√©er le canal d'alerte
                    alert_channel = await guild.create_text_channel(
                        name="security-alerts",
                        category=admin_category,
                        topic="Alertes de s√©curit√© automatiques",
                        reason="Canal pour les alertes de s√©curit√©"
                    )
                    
                    # Configurer les permissions pour que seuls les admins puissent voir ce canal
                    await alert_channel.set_permissions(guild.default_role, read_messages=False)
                    admin_role = discord.utils.get(guild.roles, name="Admin")
                    if admin_role:
                        await alert_channel.set_permissions(admin_role, read_messages=True, send_messages=True)
            
            if alert_channel:
                # Cr√©er l'embed d'alerte
                alert_embed = discord.Embed(
                    title="üö® Alerte de S√©curit√©",
                    description=f"Probl√®me de s√©curit√© d√©tect√© pour l'utilisateur {member.mention}",
                    color=discord.Color.red(),
                    timestamp=datetime.now()
                )
                
                # Ajouter les d√©tails selon la raison
                if reason == "ip_change":
                    user_id = str(member.id)
                    old_ip = self.user_data[user_id]["ip"] if user_id in self.user_data else "Inconnue"
                    new_ip = self.get_user_ip(member)
                    
                    alert_embed.add_field(
                        name="Type d'alerte",
                        value="Changement d'IP d√©tect√©",
                        inline=False
                    )
                    
                    alert_embed.add_field(
                        name="Ancienne IP",
                        value=f"`{old_ip}`",
                        inline=True
                    )
                    
                    alert_embed.add_field(
                        name="Nouvelle IP",
                        value=f"`{new_ip}`",
                        inline=True
                    )
                elif reason == "tentatives_max":
                    alert_embed.add_field(
                        name="Type d'alerte",
                        value="Nombre maximum de tentatives de v√©rification atteint",
                        inline=False
                    )
                elif reason == "timeout":
                    alert_embed.add_field(
                        name="Type d'alerte",
                        value="L'utilisateur n'a pas r√©pondu √† la demande de v√©rification",
                        inline=False
                    )
                
                alert_embed.add_field(
                    name="Utilisateur",
                    value=f"**Nom:** {member.name}\n**ID:** {member.id}\n**Cr√©√© le:** {member.created_at.strftime('%d/%m/%Y')}\n**Rejoint le:** {member.joined_at.strftime('%d/%m/%Y')}",
                    inline=False
                )
                
                alert_embed.add_field(
                    name="Actions possibles",
                    value="‚Ä¢ `/verify @utilisateur` - Forcer la v√©rification de l'utilisateur\n"
                          "‚Ä¢ `/unlock @utilisateur` - Restaurer les acc√®s de l'utilisateur\n"
                          "‚Ä¢ `/ban @utilisateur` - Bannir l'utilisateur du serveur",
                    inline=False
                )
                
                # Mentionner les administrateurs
                await alert_channel.send(content="@here", embed=alert_embed)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'alerte des administrateurs: {str(e)}")
    
    @commands.Cog.listener()
    async def on_member_join(self, member):
        """G√©rer l'arriv√©e d'un nouveau membre"""
        user_id = str(member.id)
        
        # G√©n√©rer une cl√© secr√®te
        secret_key = self.generate_secret_key()
        
        # Obtenir l'IP de l'utilisateur
        ip = self.get_user_ip(member)
        
        # Stocker les informations dans la base de donn√©es
        self.user_data[user_id] = {
            "secret_key": secret_key,
            "ip": ip,
            "joined_at": datetime.now().isoformat(),
            "last_verified": None,  # Pas encore v√©rifi√©
            "verified": False  # Nouveau membre, pas encore v√©rifi√©
        }
        
        # Sauvegarder la base de donn√©es
        self.save_db()
        
        # Ajouter √† la liste des v√©rifications en attente
        self.pending_verifications[user_id] = {
            "guild_id": member.guild.id,
            "key": secret_key
        }
        
        # Envoyer la cl√© secr√®te √† l'utilisateur
        success = await self.send_secret_key(member, secret_key, is_new_member=True)
        
        if success:
            print(f"üîë Cl√© de v√©rification envoy√©e √† {member.name} ({member.id})")
            
            # Envoyer un message dans le canal de bienvenue si configur√©
            welcome_channel_id = config.WELCOME_CHANNEL_ID
            if welcome_channel_id:
                try:
                    welcome_channel = member.guild.get_channel(int(welcome_channel_id))
                    if welcome_channel:
                        embed = discord.Embed(
                            title="üëã Nouveau Membre",
                            description=f"Bienvenue {member.mention} sur le serveur!",
                            color=discord.Color.green()
                        )
                        embed.add_field(
                            name="V√©rification Requise",
                            value="Une cl√© de s√©curit√© a √©t√© envoy√©e en message priv√©.\n"
                                  "Utilisez `!verify [votre cl√©]` pour acc√©der au serveur.",
                            inline=False
                        )
                        await welcome_channel.send(embed=embed)
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors de l'envoi du message de bienvenue: {str(e)}")
        else:
            print(f"‚ö†Ô∏è Impossible d'envoyer la cl√© de v√©rification √† {member.name} ({member.id})")
            
            # Alerter les administrateurs
            await self.alert_admins(member, member.guild, "dm_closed")
    
    @commands.Cog.listener()
    async def on_message(self, message):
        """V√©rifier l'IP de l'utilisateur √† chaque message et traiter les commandes de v√©rification"""
        # Ignorer les messages des bots et les messages priv√©s
        if message.author.bot or not message.guild:
            return
        
        user_id = str(message.author.id)
        
        # V√©rifier si c'est une commande de v√©rification
        if message.content.startswith('!verify '):
            await self.process_verification(message)
            return
        
        # V√©rifier si l'utilisateur est dans la base de donn√©es
        if user_id not in self.user_data:
            # Nouvel utilisateur, l'ajouter √† la base de donn√©es
            await self.on_member_join(message.author)
            return
        
        # V√©rifier si l'utilisateur est d√©j√† en cours de v√©rification
        if user_id in self.verification_in_progress:
            return
        
        # V√©rifier si l'utilisateur n'est pas encore v√©rifi√©
        if not self.user_data[user_id].get("verified", False):
            # Rappeler √† l'utilisateur qu'il doit se v√©rifier
            if user_id in self.pending_verifications:
                # Ne pas spammer le rappel, v√©rifier si on l'a d√©j√† fait r√©cemment
                last_reminder = self.user_data[user_id].get("last_reminder")
                if not last_reminder or (datetime.now() - datetime.fromisoformat(last_reminder)).total_seconds() > 300:  # 5 minutes
                    await message.channel.send(
                        f"{message.author.mention}, vous devez vous v√©rifier pour acc√©der pleinement au serveur. "
                        f"Utilisez `!verify [votre cl√©]` avec la cl√© qui vous a √©t√© envoy√©e en message priv√©.",
                        delete_after=10
                    )
                    self.user_data[user_id]["last_reminder"] = datetime.now().isoformat()
                    self.save_db()
            return
        
        # Obtenir l'IP actuelle
        current_ip = self.get_user_ip(message.author)
        
        # V√©rifier si l'IP a chang√©
        if current_ip != self.user_data[user_id]["ip"]:
            print(f"üîç Changement d'IP d√©tect√© pour {message.author.name}: {self.user_data[user_id]['ip']} -> {current_ip}")
            
            # Alerter les administrateurs
            await self.alert_admins(message.author, message.guild, "ip_change")
            
            # D√©marrer le processus de v√©rification
            await self.start_verification(message.author, message.guild)
    
    async def process_verification(self, message):
        """Traiter une commande de v√©rification"""
        user_id = str(message.author.id)
        
        # Supprimer le message pour la confidentialit√©
        try:
            await message.delete()
        except:
            pass
        
        # Extraire la cl√©
        parts = message.content.split(' ', 1)
        if len(parts) < 2:
            await message.channel.send(
                f"{message.author.mention}, format incorrect. Utilisez `!verify [votre cl√©]`.",
                delete_after=5
            )
            return
        
        provided_key = parts[1].strip()
        
        # V√©rifier si l'utilisateur est en attente de v√©rification
        if user_id in self.pending_verifications:
            expected_key = self.pending_verifications[user_id]["key"]
            
            if provided_key == expected_key:
                # Cl√© correcte
                guild = message.guild
                
                # Marquer comme v√©rifi√©
                self.user_data[user_id]["verified"] = True
                self.user_data[user_id]["last_verified"] = datetime.now().isoformat()
                self.save_db()
                
                # Retirer de la liste des v√©rifications en attente
                del self.pending_verifications[user_id]
                
                # Attribuer le r√¥le Membre si configur√©
                if self.member_role_id:
                    try:
                        member_role = guild.get_role(int(self.member_role_id))
                        if member_role:
                            await message.author.add_roles(member_role, reason="V√©rification r√©ussie")
                            print(f"‚úÖ R√¥le Membre attribu√© √† {message.author.name}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Erreur lors de l'attribution du r√¥le Membre: {str(e)}")
                
                # Confirmer la v√©rification
                embed = discord.Embed(
                    title="‚úÖ V√©rification R√©ussie",
                    description=f"{message.author.mention}, votre compte a √©t√© v√©rifi√© avec succ√®s!",
                    color=discord.Color.green()
                )
                
                await message.channel.send(embed=embed, delete_after=10)
                
                # Envoyer un message priv√© de confirmation
                try:
                    confirm_embed = discord.Embed(
                        title="‚úÖ V√©rification R√©ussie",
                        description="Votre compte a √©t√© v√©rifi√© avec succ√®s! Vous avez maintenant acc√®s √† tous les canaux du serveur.",
                        color=discord.Color.green()
                    )
                    await message.author.send(embed=confirm_embed)
                except:
                    pass
                
                print(f"‚úÖ Utilisateur {message.author.name} v√©rifi√© avec succ√®s")
            else:
                # Cl√© incorrecte
                # Incr√©menter le compteur d'√©checs
                if user_id not in self.failed_attempts:
                    self.failed_attempts[user_id] = 1
                else:
                    self.failed_attempts[user_id] += 1
                
                # Informer l'utilisateur
                await message.channel.send(
                    f"{message.author.mention}, cl√© incorrecte. V√©rifiez votre message priv√© et r√©essayez. "
                    f"Tentative {self.failed_attempts[user_id]}/{self.max_attempts}.",
                    delete_after=5
                )
                
                # Si trop d'√©checs, alerter les administrateurs
                if self.failed_attempts[user_id] >= self.max_attempts:
                    await self.alert_admins(message.author, message.guild, "verification_failed")
                    self.failed_attempts[user_id] = 0  # R√©initialiser pour permettre de r√©essayer
        else:
            # L'utilisateur n'est pas en attente de v√©rification
            if user_id in self.user_data and self.user_data[user_id].get("verified", False):
                await message.channel.send(
                    f"{message.author.mention}, votre compte est d√©j√† v√©rifi√©.",
                    delete_after=5
                )
            else:
                await message.channel.send(
                    f"{message.author.mention}, aucune v√©rification en attente. Contactez un administrateur si vous avez besoin d'aide.",
                    delete_after=5
                )
    
    @commands.command(name="set_member_role")
    @commands.has_permissions(administrator=True)
    async def set_member_role(self, ctx, role: discord.Role = None):
        """D√©finir le r√¥le √† attribuer aux membres v√©rifi√©s
        
        Usage: !set_member_role @r√¥le
        """
        if role:
            # Mettre √† jour le r√¥le dans la configuration
            config.MEMBER_ROLE_ID = role.id
            self.member_role_id = role.id
            
            await ctx.send(f"‚úÖ Le r√¥le {role.mention} sera d√©sormais attribu√© aux membres v√©rifi√©s.")
        else:
            # Afficher le r√¥le actuel
            if self.member_role_id:
                role = ctx.guild.get_role(int(self.member_role_id))
                if role:
                    await ctx.send(f"‚ÑπÔ∏è Le r√¥le actuel pour les membres v√©rifi√©s est: {role.mention}")
                else:
                    await ctx.send("‚ö†Ô∏è Le r√¥le configur√© n'existe pas ou n'est pas accessible.")
            else:
                await ctx.send("‚ÑπÔ∏è Aucun r√¥le n'est configur√© pour les membres v√©rifi√©s.")
    
    @commands.command(name="admin_verify")
    @commands.has_permissions(administrator=True)
    async def force_verify(self, ctx, member: discord.Member):
        """Forcer la v√©rification d'un utilisateur (Admin uniquement)
        
        Usage: !admin_verify @utilisateur
        """
        user_id = str(member.id)
        
        # Marquer comme v√©rifi√©
        if user_id in self.user_data:
            self.user_data[user_id]["verified"] = True
            self.user_data[user_id]["last_verified"] = datetime.now().isoformat()
        else:
            # Nouvel utilisateur
            self.user_data[user_id] = {
                "secret_key": self.generate_secret_key(),
                "ip": self.get_user_ip(member),
                "joined_at": datetime.now().isoformat(),
                "last_verified": datetime.now().isoformat(),
                "verified": True
            }
        
        self.save_db()
        
        # Retirer de la liste des v√©rifications en attente
        if user_id in self.pending_verifications:
            del self.pending_verifications[user_id]
        
        # Attribuer le r√¥le Membre si configur√©
        if self.member_role_id:
            try:
                member_role = ctx.guild.get_role(int(self.member_role_id))
                if member_role and member_role not in member.roles:
                    await member.add_roles(member_role, reason="V√©rification forc√©e par administrateur")
                    print(f"‚úÖ R√¥le Membre attribu√© √† {member.name} par administrateur")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors de l'attribution du r√¥le Membre: {str(e)}")
        
        await ctx.send(f"‚úÖ {member.mention} a √©t√© v√©rifi√© avec succ√®s par un administrateur.")
    
    @commands.command(name="unlock")
    @commands.has_permissions(administrator=True)
    async def force_unlock(self, ctx, member: discord.Member):
        """Restaurer les acc√®s d'un utilisateur sans v√©rification (Admin uniquement)
        
        Usage: !unlock @utilisateur
        """
        user_id = str(member.id)
        
        # Mettre √† jour l'IP dans la base de donn√©es
        if user_id in self.user_data:
            self.user_data[user_id]["ip"] = self.get_user_ip(member)
            self.user_data[user_id]["last_verified"] = datetime.now().isoformat()
            self.user_data[user_id]["verified"] = True
            self.save_db()
        
        # D√©verrouiller l'utilisateur
        success = await self.unlock_user(member, ctx.guild)
        
        if success:
            await ctx.send(f"‚úÖ Les acc√®s de {member.mention} ont √©t√© restaur√©s.")
        else:
            await ctx.send(f"‚ùå Erreur lors de la restauration des acc√®s de {member.mention}.")
    
    @commands.command(name="reset_key")
    @commands.has_permissions(administrator=True)
    async def reset_secret_key(self, ctx, member: discord.Member):
        """R√©initialiser la cl√© secr√®te d'un utilisateur (Admin uniquement)
        
        Usage: !reset_key @utilisateur
        """
        user_id = str(member.id)
        
        # G√©n√©rer une nouvelle cl√©
        new_key = self.generate_secret_key()
        
        # Mettre √† jour la base de donn√©es
        if user_id in self.user_data:
            self.user_data[user_id]["secret_key"] = new_key
            self.save_db()
        else:
            # Nouvel utilisateur
            self.user_data[user_id] = {
                "secret_key": new_key,
                "ip": self.get_user_ip(member),
                "joined_at": datetime.now().isoformat(),
                "last_verified": None,
                "verified": False
            }
            self.save_db()
        
        # Ajouter √† la liste des v√©rifications en attente
        self.pending_verifications[user_id] = {
            "guild_id": ctx.guild.id,
            "key": new_key
        }
        
        # Envoyer la nouvelle cl√© √† l'utilisateur
        success = await self.send_secret_key(member, new_key, is_new_member=True)
        
        if success:
            await ctx.send(f"‚úÖ Une nouvelle cl√© a √©t√© g√©n√©r√©e et envoy√©e √† {member.mention}.")
        else:
            await ctx.send(f"‚ö†Ô∏è La cl√© a √©t√© g√©n√©r√©e mais n'a pas pu √™tre envoy√©e √† {member.mention}.")
            
            # Envoyer la cl√© √† l'administrateur
            admin_embed = discord.Embed(
                title="üîë Nouvelle Cl√© Secr√®te",
                description=f"Voici la nouvelle cl√© pour {member.mention}:",
                color=discord.Color.blue()
            )
            
            admin_embed.add_field(
                name="Cl√©",
                value=f"`{new_key}`",
                inline=False
            )
            
            admin_embed.add_field(
                name="Instructions",
                value="Veuillez transmettre cette cl√© √† l'utilisateur de mani√®re s√©curis√©e.",
                inline=False
            )
            
            await ctx.author.send(embed=admin_embed)
    
    @commands.command(name="security_help")
    async def security_help(self, ctx):
        """Afficher l'aide du syst√®me de s√©curit√©
        
        Usage: !security_help
        """
        embed = discord.Embed(
            title="üîí Aide du Syst√®me de S√©curit√©",
            description="Le syst√®me de s√©curit√© prot√®ge le serveur en v√©rifiant l'identit√© des membres.",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="Pour les Membres",
            value="‚Ä¢ `!verify [cl√©]` : V√©rifier votre compte avec la cl√© re√ßue en message priv√©\n",
            inline=False
        )
        
        embed.add_field(
            name="Pour les Administrateurs",
            value="‚Ä¢ `!admin_verify @utilisateur` : Forcer la v√©rification d'un utilisateur\n"
                  "‚Ä¢ `!unlock @utilisateur` : Restaurer les acc√®s d'un utilisateur\n"
                  "‚Ä¢ `!reset_key @utilisateur` : R√©initialiser la cl√© secr√®te d'un utilisateur\n"
                  "‚Ä¢ `!set_member_role @r√¥le` : D√©finir le r√¥le √† attribuer aux membres v√©rifi√©s\n"
                  "‚Ä¢ `!security_status` : Afficher les statistiques du syst√®me de s√©curit√©",
            inline=False
        )
        
        await ctx.send(embed=embed)
    
    @commands.command(name="security_status")
    @commands.has_permissions(administrator=True)
    async def security_status(self, ctx):
        """Afficher l'√©tat du syst√®me de s√©curit√© (Admin uniquement)
        
        Usage: !security_status
        """
        embed = discord.Embed(
            title="üõ°Ô∏è √âtat du Syst√®me de S√©curit√©",
            description="Informations sur le syst√®me de s√©curit√© par cl√© secr√®te",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="Utilisateurs enregistr√©s",
            value=str(len(self.user_data)),
            inline=True
        )
        
        embed.add_field(
            name="V√©rifications en cours",
            value=str(len(self.verification_in_progress)),
            inline=True
        )
        
        embed.add_field(
            name="Tentatives √©chou√©es",
            value=str(len(self.failed_attempts)),
            inline=True
        )
        
        # Ajouter les 5 derniers utilisateurs enregistr√©s
        recent_users = []
        for user_id, data in sorted(self.user_data.items(), key=lambda x: x[1].get("joined_at", ""), reverse=True)[:5]:
            user = ctx.guild.get_member(int(user_id))
            if user:
                joined_at = datetime.fromisoformat(data.get("joined_at", datetime.now().isoformat()))
                recent_users.append(f"‚Ä¢ {user.mention} - {joined_at.strftime('%d/%m/%Y %H:%M')}")
        
        if recent_users:
            embed.add_field(
                name="Derniers utilisateurs enregistr√©s",
                value="\n".join(recent_users),
                inline=False
            )
        
        # Ajouter les utilisateurs en v√©rification
        if self.verification_in_progress:
            in_verification = []
            for user_id in self.verification_in_progress:
                user = ctx.guild.get_member(int(user_id))
                if user:
                    in_verification.append(f"‚Ä¢ {user.mention}")
            
            if in_verification:
                embed.add_field(
                    name="Utilisateurs en v√©rification",
                    value="\n".join(in_verification),
                    inline=False
                )
        
        await ctx.send(embed=embed)

async def setup(bot):
    await bot.add_cog(Security(bot)) 